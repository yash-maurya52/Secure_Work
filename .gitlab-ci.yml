# Generalized GitLab CI for comprehensive Semgrep SAST scanning and advanced Python security analysis
# Docs:
# Semgrep Customization: https://semgrep.dev/docs/semgrep-ci/sample-ci-configs/gitlab/
# GitLab SAST Integration: https://docs.gitlab.com/ee/user/application_security/sast/

stages:
  - security_scan
  - test

# Variables for Semgrep configuration
variables:
  SEMGREP_RULES: p/default  # Use default Semgrep rules for multi-language detection
  SEMGREP_SEVERITY: WARNING  # Set to WARNING, ERROR, or INFO based on strictness
  SEMGREP_NO_GIT_IGNORE: 'true'  # Ensures all files are scanned
  PYTHONPATH: "."

# Semgrep scan job
semgrep_scan:
  stage: security_scan
  image: returntocorp/semgrep  # Official Semgrep Docker image with CLI preinstalled
  rules:
    - if: $CI_PIPELINE_SOURCE == "push" || $CI_PIPELINE_SOURCE == "merge_request_event"
  script:
    - echo "🔍 Starting comprehensive security scan with Semgrep..."
    - semgrep ci --config "$SEMGREP_RULES" --severity "$SEMGREP_SEVERITY" --sarif --output semgrep.sarif || true
    - test -f semgrep.sarif && echo "✅ Scan completed" || echo "❌ Scan failed - no report"
  artifacts:
    when: always
    paths:
      - semgrep.sarif
    reports:
      sast: semgrep.sarif

# Extended Python-specific vulnerability scanning (runs in 'test' stage)
bandit_test:
  stage: test
  image: python:3.10
  script:
    - pip install bandit
    - bandit -r . -f json -o bandit_report.json || true
  artifacts:
    paths:
      - bandit_report.json
    when: always
  rules:
    - exists:
        - "*.py"

safety_test:
  stage: test
  image: python:3.10
  script:
    - pip install safety
    - pip freeze > requirements.txt
    - safety check -r requirements.txt --json > safety_cve.json || true
  artifacts:
    paths:
      - safety_cve.json
    when: always
  rules:
    - exists:
        - "*.py"

trufflehog_test:
  stage: test
  image: alpine:latest
  before_script:
    - apk add --no-cache python3 py3-pip git
    - pip3 install trufflehog
  script:
    - trufflehog filesystem --path . --format json --output trufflehog_secrets.json || true
  artifacts:
    paths:
      - trufflehog_secrets.json
    when: always
  rules:
    - exists:
        - "*.py"


pylint_test:
  stage: test
  image: python:3.10
  script:
    - pip install pylint
    - find . -name "*.py" | xargs pylint --exit-zero --output-format=json > pylint_report.json || true
  artifacts:
    paths:
      - pylint_report.json
    when: always
  rules:
    - exists:
        - "*.py"

include:
  - template: Security/SAST.gitlab-ci.yml
  - template: Security/SAST-IaC.latest.gitlab-ci.yml
