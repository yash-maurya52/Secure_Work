# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/user/application_security/secret_detection/pipeline/configure
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence
stages:
- security_scan
- test
variables:
  SEMGREP_RULES: r/python.sql-injection
  SEMGREP_SEVERITY: ERROR
  SEMGREP_NO_GIT_IGNORE: 'true'
semgrep_scan:
  stage: security_scan
  image: python:3.9-alpine
  rules:
  - if: $CI_PIPELINE_SOURCE == "push"
  before_script:
  - apk add --no-cache git
  - pip install semgrep
  script:
  - "echo \"\U0001F50D Starting security scan...\""
  - semgrep --config="$SEMGREP_RULES" --severity="$SEMGREP_SEVERITY" --sarif --output=semgrep.sarif
    malicious.py || true
  - test -f semgrep.sarif && echo "✅ Scan completed" || echo "❌ Scan failed - no report"
  artifacts:
    when: always
    paths:
    - semgrep.sarif
    reports:
      sast: semgrep.sarif
sast:
  stage: test
include:
- template: Security/SAST.gitlab-ci.yml
