# You can override the included template(s) by including variable overrides
# SAST customization: https://docs.gitlab.com/ee/user/application_security/sast/#customizing-the-sast-settings
# Secret Detection customization: https://docs.gitlab.com/user/application_security/secret_detection/pipeline/configure
# Dependency Scanning customization: https://docs.gitlab.com/ee/user/application_security/dependency_scanning/#customizing-the-dependency-scanning-settings
# Container Scanning customization: https://docs.gitlab.com/ee/user/application_security/container_scanning/#customizing-the-container-scanning-settings
# Note that environment variables can be set in several places
# See https://docs.gitlab.com/ee/ci/variables/#cicd-variable-precedence

include:
  - template: Security/SAST.gitlab-ci.yml

stages:
  - security_scan
  - test

variables:
  SEMGREP_RULES: p/owasp-top-ten
  SAST_REPORT_FORMAT: sarif

scan_changed_python_files:
  stage: security_scan
  image: alpine
  rules:
    - if: $CI_PIPELINE_SOURCE == "push"
  script:
    - apk add --no-cache git
    - echo "üîç Identifying changed Python files..."
    - CHANGED_PY_FILES=$(git diff --name-only --diff-filter=AM HEAD~1 HEAD | grep '\.py$' || true)
    - |
      if [ -z "$CHANGED_PY_FILES" ]; then
        echo "No Python files changed - skipping scan"
        exit 0
      else
        echo "Changed files to scan:"
        echo "$CHANGED_PY_FILES"
      fi
    - wget -qO- https://semgrep.dev/install | sh
    - export PATH="$PATH:/root/.local/bin"
    - |
      for file in $CHANGED_PY_FILES; do
        echo "Scanning $file..."
        semgrep --config="$SEMGREP_RULES" --error --verbose "$file"
      done
  artifacts:
    when: always
    reports:
      sast: semgrep.sarif
